{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\machi\\\\Desktop\\\\Montessori\\\\Interactive-Balance-Board-\\\\frontend\\\\src\\\\SystemContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SystemContext = /*#__PURE__*/createContext();\nexport const SystemProvider = ({\n  children\n}) => {\n  _s();\n  const [isSystemOn, setIsSystemOn] = useState(false);\n\n  // [NEW or MODIFIED CODE for LED slider logic]\n  // We keep areLEDsOn in the state so we can track DB updates,\n  // but we no longer toggle it manually via a button.\n  const [areLEDsOn, setAreLEDsOn] = useState(false);\n  const [deviceCount, setDeviceCount] = useState(0);\n  const [gameModeSelected, setGameModeSelected] = useState('');\n  const [ledBrightness, setLedBrightness] = useState(0);\n  useEffect(() => {\n    axios.get('/api/board').then(response => {\n      const {\n        isSystemOn,\n        areLEDsOn,\n        deviceCount,\n        gameModeSelected,\n        ledBrightness\n      } = response.data;\n      setIsSystemOn(isSystemOn);\n      setAreLEDsOn(areLEDsOn); // [NEW or MODIFIED CODE for LED slider logic]\n      setDeviceCount(deviceCount);\n      setGameModeSelected(gameModeSelected);\n      if (ledBrightness !== undefined) {\n        setLedBrightness(ledBrightness);\n      }\n    }).catch(error => {\n      console.error('Error fetching board state:', error);\n    });\n  }, []);\n  const updateBoardState = updatedState => {\n    axios.post('/api/board/update', updatedState).then(response => {\n      console.log('Board state updated successfully:', response.data);\n      // If response contains updated areLEDsOn or ledBrightness, update local states\n      if (response.data.areLEDsOn !== undefined) {\n        setAreLEDsOn(response.data.areLEDsOn);\n      }\n      if (response.data.ledBrightness !== undefined) {\n        setLedBrightness(response.data.ledBrightness);\n      }\n    }).catch(error => {\n      console.error('Error updating board state:', error);\n    });\n  };\n  const toggleSystem = () => {\n    const newSystemState = !isSystemOn;\n    setIsSystemOn(newSystemState);\n    updateBoardState({\n      isSystemOn: newSystemState\n    });\n  };\n  const selectGameMode = mode => {\n    setGameModeSelected(mode);\n    updateBoardState({\n      gameModeSelected: mode\n    });\n  };\n\n  // [NEW or MODIFIED CODE for LED slider logic]\n  // Whenever ledBrightness changes, we also set areLEDsOn = (brightnessValue > 0).\n  const updateLedBrightness = newBrightness => {\n    const brightnessValue = Number(newBrightness);\n    setLedBrightness(brightnessValue);\n    const newLEDsOn = brightnessValue > 0; // If brightness > 0 => true, else false\n    setAreLEDsOn(newLEDsOn);\n\n    // Send both fields to DB\n    updateBoardState({\n      ledBrightness: brightnessValue,\n      areLEDsOn: newLEDsOn\n    });\n  };\n  const sendCommandToESP32 = command => {\n    axios.post('http://localhost:5000/api/board/esp', {\n      command\n    }).then(response => {\n      console.log('Command sent to ESP32:', response.data);\n    }).catch(error => {\n      console.error('Error sending command to ESP32:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SystemContext.Provider, {\n    value: {\n      isSystemOn,\n      toggleSystem,\n      deviceCount,\n      setDeviceCount,\n      gameModeSelected,\n      selectGameMode,\n      // [NEW or MODIFIED CODE for LED slider logic]\n      ledBrightness,\n      areLEDsOn,\n      updateLedBrightness\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(SystemProvider, \"Y91D0DFo8YeqQaqdke/oQArT9bQ=\");\n_c = SystemProvider;\nexport default SystemContext;\nvar _c;\n$RefreshReg$(_c, \"SystemProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","SystemContext","SystemProvider","children","_s","isSystemOn","setIsSystemOn","areLEDsOn","setAreLEDsOn","deviceCount","setDeviceCount","gameModeSelected","setGameModeSelected","ledBrightness","setLedBrightness","get","then","response","data","undefined","catch","error","console","updateBoardState","updatedState","post","log","toggleSystem","newSystemState","selectGameMode","mode","updateLedBrightness","newBrightness","brightnessValue","Number","newLEDsOn","sendCommandToESP32","command","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/machi/Desktop/Montessori/Interactive-Balance-Board-/frontend/src/SystemContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SystemContext = createContext();\r\n\r\nexport const SystemProvider = ({ children }) => {\r\n  const [isSystemOn, setIsSystemOn] = useState(false);\r\n\r\n  // [NEW or MODIFIED CODE for LED slider logic]\r\n  // We keep areLEDsOn in the state so we can track DB updates,\r\n  // but we no longer toggle it manually via a button.\r\n  const [areLEDsOn, setAreLEDsOn] = useState(false);\r\n\r\n  const [deviceCount, setDeviceCount] = useState(0);\r\n  const [gameModeSelected, setGameModeSelected] = useState('');\r\n  const [ledBrightness, setLedBrightness] = useState(0);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get('/api/board')\r\n      .then((response) => {\r\n        const {\r\n          isSystemOn,\r\n          areLEDsOn,\r\n          deviceCount,\r\n          gameModeSelected,\r\n          ledBrightness\r\n        } = response.data;\r\n\r\n        setIsSystemOn(isSystemOn);\r\n        setAreLEDsOn(areLEDsOn); // [NEW or MODIFIED CODE for LED slider logic]\r\n        setDeviceCount(deviceCount);\r\n        setGameModeSelected(gameModeSelected);\r\n\r\n        if (ledBrightness !== undefined) {\r\n          setLedBrightness(ledBrightness);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching board state:', error);\r\n      });\r\n  }, []);\r\n\r\n  const updateBoardState = (updatedState) => {\r\n    axios\r\n      .post('/api/board/update', updatedState)\r\n      .then((response) => {\r\n        console.log('Board state updated successfully:', response.data);\r\n        // If response contains updated areLEDsOn or ledBrightness, update local states\r\n        if (response.data.areLEDsOn !== undefined) {\r\n          setAreLEDsOn(response.data.areLEDsOn);\r\n        }\r\n        if (response.data.ledBrightness !== undefined) {\r\n          setLedBrightness(response.data.ledBrightness);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating board state:', error);\r\n      });\r\n  };\r\n\r\n  const toggleSystem = () => {\r\n    const newSystemState = !isSystemOn;\r\n    setIsSystemOn(newSystemState);\r\n    updateBoardState({ isSystemOn: newSystemState });\r\n  };\r\n\r\n  const selectGameMode = (mode) => {\r\n    setGameModeSelected(mode);\r\n    updateBoardState({ gameModeSelected: mode });\r\n  };\r\n\r\n  // [NEW or MODIFIED CODE for LED slider logic]\r\n  // Whenever ledBrightness changes, we also set areLEDsOn = (brightnessValue > 0).\r\n  const updateLedBrightness = (newBrightness) => {\r\n    const brightnessValue = Number(newBrightness);\r\n    setLedBrightness(brightnessValue);\r\n\r\n    const newLEDsOn = brightnessValue > 0; // If brightness > 0 => true, else false\r\n    setAreLEDsOn(newLEDsOn);\r\n\r\n    // Send both fields to DB\r\n    updateBoardState({\r\n      ledBrightness: brightnessValue,\r\n      areLEDsOn: newLEDsOn\r\n    });\r\n  };\r\n\r\n  const sendCommandToESP32 = (command) => {\r\n    axios\r\n      .post('http://localhost:5000/api/board/esp', { command })\r\n      .then((response) => {\r\n        console.log('Command sent to ESP32:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error sending command to ESP32:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <SystemContext.Provider\r\n      value={{\r\n        isSystemOn,\r\n        toggleSystem,\r\n        deviceCount,\r\n        setDeviceCount,\r\n        gameModeSelected,\r\n        selectGameMode,\r\n        // [NEW or MODIFIED CODE for LED slider logic]\r\n        ledBrightness,\r\n        areLEDsOn,\r\n        updateLedBrightness\r\n      }}\r\n    >\r\n      {children}\r\n    </SystemContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SystemContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}